import os
from telebot import *
from gigachat import GigaChat
import requests
import subprocess
import speech_recognition as sr
import datetime
import logging

from stt import audio_to_text
from config import token

bot = telebot.TeleBot(token)

logging.basicConfig(level=logging.DEBUG, format="%(asctime)s %(message)s",
                    filename="logs.txt")


#—Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start(message):  
    keyboard = telebot.types.InlineKeyboardMarkup()
    button_start = telebot.types.InlineKeyboardButton(text='–ü—Ä–∏—Å—Ç—É–ø–∏–º!', callback_data='get_started')
    button_help = telebot.types.InlineKeyboardButton(text='–Ø —Ö–æ—á—É —É–∑–Ω–∞—Ç—å –æ —Ç–µ–±–µ –ø–æ–±–æ–ª—å—à–µ.', callback_data='get_help')
    keyboard.add(button_start, button_help)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ –Ω–∞–≤—ã–∫–∏!", reply_markup=keyboard) 

@bot.callback_query_handler(func=lambda call: call.data == 'get_help')
def help(call):
    message=call.message
    message_id = message.message_id
    chat_id = message.chat.id  
    keyboard = telebot.types.InlineKeyboardMarkup()
    button_get_started = telebot.types.InlineKeyboardButton(text='–ü—Ä–∏—Å—Ç—É–ø–∏–º!', callback_data='get_started')
    keyboard.add(button_get_started)
    bot.edit_message_text(chat_id=chat_id,message_id=message_id, text="–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏, –ø—Ä–∏–¥—É–º–∞–≤ –∏—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n–Ø –º–æ–≥—É –ø–æ–Ω–∏–º–∞—Ç—å —Ç–µ–±—è:\n   ‚Ä¢—Ç–µ–∫—Å—Ç–æ–º\n   ‚Ä¢–≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n   ‚Ä¢—Ñ–æ—Ç–æ", 
                    reply_markup=keyboard)


#–¥–µ–±–∞–∂–∏–º –±–æ—Ç–∞ 
@bot.message_handler(commands=['debug'])
def send_logs(message):
    chat_id = message.chat.id
    log_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'bot_logs.log')
    if os.path.exists(log_path) and os.path.getsize(log_path) > 0:
        with open(log_path, 'rb') as log_file:
            bot.send_document(chat_id, log_file)
    else:
        bot.send_message(chat_id, '–§–∞–π–ª –ª–æ–≥–æ–≤ –ø—É—Å—Ç')   


#—É–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Ç–µ–∫—Å—Ç–æ–º
@bot.callback_query_handler(func=lambda call: call.data == 'get_started')
def get_started(call):
    message = call.message
    global chat_id
    chat_id = message.chat.id  
    global message_id
    message_id = message.message_id
    button_text=telebot.types.InlineKeyboardButton(text='üì∞ —Ç–µ–∫—Å—Ç', callback_data='text')
    button_audio=telebot.types.InlineKeyboardButton(text='üé§ –∞—É–¥–∏–æ', callback_data='audio')
    button_photo=telebot.types.InlineKeyboardButton(text='üì∏ —Ñ–æ—Ç–æ', callback_data='photo')
    keyboard1 = telebot.types.InlineKeyboardMarkup()
    keyboard1.add(button_text, button_audio, button_photo)
    bot.edit_message_text(chat_id=chat_id, message_id=message_id, 
                         text='–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∑–Ω–∞—Ç—å –∏–∑ –∫–∞–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ç—ã –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∏—Ç—å —Å–≤–æ—ë –±–ª—é–¥–æ.\n–ü—Ä–∏—à–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ç–µ–∫—Å—Ç–æ–º, –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –∫–∞–º–µ—Ä—É.', reply_markup=keyboard1)

@bot.callback_query_handler(func=lambda call: call.data == 'text')
def text1(call):
    message=call.message
    bot.edit_message_text(chat_id=chat_id,message_id=message_id,
                        text='–ù–∞–ø–∏—à–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É —Ç–µ–±—è –µ—Å—Ç—å, –∞ —è –ø–æ–ø—Ä–æ–±—É—é –ø—Ä–∏–¥—É–º–∞—Ç—å –¥–ª—è —Ç–µ–±—è —Ä–µ—Ü–µ–ø—Ç .')
    bot.register_next_step_handler(message, text2)

@bot.message_handler(content_types=['message'])
def text2(message1):
    try:
        global keyboard_text
        keyboard_text = telebot.types.InlineKeyboardMarkup()
        button_other = telebot.types.InlineKeyboardButton(text='–ü—Ä–∏–¥—É–º–∞–π –¥—Ä—É–≥–æ–µ –±–ª—é–¥–æ', callback_data='other')
        button_more = telebot.types.InlineKeyboardButton(text='–î–∞–≤–∞–π  –±–æ–ª—å—à–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤!', callback_data='get_started')
        button_bye = telebot.types.InlineKeyboardButton(text='–Ø –Ω–µ —Ö–æ—á—É –±–æ–ª—å—à–µ –≥–æ—Ç–æ–≤–∏—Ç—å. –ü–æ–∫–∞!', callback_data='bye')
        keyboard_text.add(button_other, button_more, button_bye)
        with GigaChat(credentials='YTgzYThiZWYtMTU5Ny00ZmEyLWIzMTEtNGEwOTQ0MDc5MWYwOjA2MzlmY2QxLWMwNzQtNDkyNC1hNzg3LTI5MTFiMDYzNTczMQ==', verify_ssl_certs=False) as giga:
            response = giga.chat("–ü—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—Ü–µ–ø—Ç –±–ª—é–¥–∞ –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: " + message1.text)
            bot.send_message(message1.chat.id,response.choices[0].message.content, reply_markup=keyboard_text)
    except TypeError:
        keyboard = telebot.types.InlineKeyboardMarkup()
        button_started = telebot.types.InlineKeyboardMarkup(text='–ù–µ —Ö–æ—á—É —Ç–µ–∫—Å—Ç–æ–º.', callback_data = 'get_started')
        button_try = telebot.types.InlineKeyboardMarkup(text='–°–ª—É—á–∞–π–Ω–æ –ø–µ—Ä–µ–ø—É—Ç–∞–ª :( . –î–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ.', callback_data = 'text')
        keyboard.add(button_started, button_try)
        bot.send_message(message1.from_user.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç.", reply_markup=keyboard)



# —É–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≥–æ–ª–æ—Å–æ–º
@bot.callback_query_handler(func=lambda call: call.data == 'audio')
def audio(call):
    message = call.message
    bot.edit_message_text(chat_id=chat_id, message_id=message_id,text='–ü—Ä–∏—à–ª–∏ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –ø–µ—Ä–µ—á–∏–ª—è–µ—à—å –ø—Ä–æ–¥—É–∫—Ç—ã, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö  –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∏—Ç—å —Å–≤–æ—ë –±–ª—é–¥–æ.')
    bot.register_next_step_handler(message, get_audio_messages)


@bot.message_handler(content_types=['voice'])
def get_audio_messages(message):
    try:
        print("–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...")
        file_info = bot.get_file(message.voice.file_id)
        path = file_info.file_path
        fname = os.path.basename(path)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        doc = requests.get(f'https://api.telegram.org/file/bot{token}/{file_info.file_path}')
        with open(fname + '.oga', 'wb') as f:
            f.write(doc.content)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º .oga –≤ .wav
        subprocess.run(['ffmpeg', '-i', fname + '.oga', fname + '.wav'])
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç
        global result
        result = audio_to_text(fname + '.wav')
        new_message = message
        new_message.text = result  
        text2(new_message)
  
    except sr.UnknownValueError:
        bot.send_message(message.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ.")
    except UnboundLocalError:
        keyboard = telebot.types.InlineKeyboardMarkup()
        button_started = telebot.types.InlineKeyboardMarkup(text='–ù–µ —Ö–æ—á—É –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.', callback_data = 'get_started')
        button_try = telebot.types.InlineKeyboardMarkup(text='–°–ª—É—á–∞–π–Ω–æ –ø–µ—Ä–µ–ø—É—Ç–∞–ª :( . –î–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ.', callback_data = 'audio')
        keyboard.add(button_started, button_try)
        bot.send_message(message.from_user.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü—Ä–∏—à–ª–∏ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=keyboard)
    except Exception as e:
        bot.send_message(message.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + str(e))
    

    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists(fname + '.oga'):
            os.remove(fname + '.oga')
        if os.path.exists(fname + '.wav'):
            os.remove(fname + '.wav')



#—É–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Ñ–æ—Ç–æ
@bot.callback_query_handler(func=lambda call: call.data == 'photo')
def photo(call):
    message = call.message
    bot.edit_message_text(chat_id=chat_id, message_id=message_id,text='–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç –≤–∏–¥–Ω—ã  –ø—Ä–æ–¥—É–∫—Ç—ã, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö  –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∏—Ç—å —Å–≤–æ—ë –±–ª—é–¥–æ.')
    bot.register_next_step_handler(message, get_photo_messages)

@bot.message_handler(content_types=['photo'])
def get_photo_messages(message):   
    fileID = message.photo[-1].file_id   
    file_info = bot.get_file(fileID)
    downloaded_file = bot.download_file(file_info.file_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_path = "image.jpg"
    with open(image_path, 'wb') as new_file:
        new_file.write(downloaded_file)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º GigaChat –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Ñ–æ—Ç–æ
    with GigaChat(credentials='YTgzYThiZWYtMTU5Ny00ZmEyLWIzMTEtNGEwOTQ0MDc5MWYwOjA2MzlmY2QxLWMwNzQtNDkyNC1hNzg3LTI5MTFiMDYzNTczMQ==', verify_ssl_certs=False) as giga:
        # –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ GigaChat –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        response = giga.chat("–ü—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—Ü–µ–ø—Ç –±–ª—é–¥–∞ –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ —Ñ–æ—Ç–æ.", image_path=image_path)
        bot.send_message(message.chat.id, response, reply_markup=keyboard_text)
    


#–≥–æ—Ç–æ–≤–∏–º –¥—Ä—É–≥–æ–µ –±–ª—é–¥–æ
@bot.callback_query_handler(func=lambda call: call.data == 'other')
def other(call):
    message=call.message
    with GigaChat(credentials='YTgzYThiZWYtMTU5Ny00ZmEyLWIzMTEtNGEwOTQ0MDc5MWYwOjA2MzlmY2QxLWMwNzQtNDkyNC1hNzg3LTI5MTFiMDYzNTczMQ==', verify_ssl_certs=False) as giga:
        response = giga.chat("–ü—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—Ü–µ–ø—Ç –¥—Ä—É–≥–æ–≥–æ –±–ª—é–¥–∞ –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: " + message.text)
        bot.send_message(message.chat.id,response.choices[0].message.content, reply_markup=keyboard_text)


#–ø—Ä–æ—â–∞–µ–º—Å—è
@bot.callback_query_handler(func=lambda call: call.data == 'bye')
def bye(message):
    bot.send_message(message.from_user.id, "–ü–æ–∫–∞! –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å. üòâ")
    


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True, interval=0)
